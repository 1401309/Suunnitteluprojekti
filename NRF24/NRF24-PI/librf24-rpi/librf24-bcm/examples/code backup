/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 
 03/17/2013 : Charles-Henri Hallard (http://hallard.me)
              Modified to use with Arduipi board http://hallard.me/arduipi
						  Changed to use modified bcm2835 and RF24 library 
 */


#include <cstdlib>
#include <iostream>
#include <unistd.h>
#include "./RF24.h"

const short SENDING = 1;
const short ACKNOWLEDGE = 2;
const short TEMPERATURE = 3;
const short HUMIDITY = 4;

const int SENSOR_COUNT = 2;

const uint64_t RecvPipe = 0x0000000FF1LL;
const uint64_t SendPipe = 0x0000000FF2LL; 

short radio_ids[SENSOR_COUNT]={0x001, 0x002};
short Temperatures[SENSOR_COUNT];
short Humidities[SENSOR_COUNT];


void PrepareToWrite();
void PrepareToRecv();
void WriteAck(short radio_id);
int FindSensorIndex(short radio_id);

// Setup for GPIO 22 CE and GPIO 25 CSN with SPI Speed @ 1Mhz
// RF24 radio(RPI_V2_GPIO_P1_22, RPI_V2_GPIO_P1_18, BCM2835_SPI_SPEED_1MHZ);

// Setup for GPIO 22 CE and CE0 CSN with SPI Speed @ 4Mhz
//RF24 radio(RPI_V2_GPIO_P1_15, BCM2835_SPI_CS0, BCM2835_SPI_SPEED_4MHZ); 

// Setup for GPIO 22 CE and CE1 CSN with SPI Speed @ 8Mhz
RF24 radio(RPI_V2_GPIO_P1_22, RPI_V2_GPIO_P1_24, BCM2835_SPI_SPEED_8MHZ);  
//RF24 radio(RPI_V2_GPIO_P1_15, RPI_V2_GPIO_P1_26, BCM2835_SPI_SPEED_8MHZ); 


unsigned char messagebuf[5] = {0x00,0x00,0x00,0x00,0x00};
unsigned char sendbuf[5] = {0x00,0x00,0x00,0x00,0x00};

int main(int argc, char** argv)
{

  
  radio.begin();

  // optionally, increase the delay between retries & # of retries
  //radio.setRetries(15,15);

  // optionally, reduce the payload size.  seems to
  // improve reliability
  radio.setPayloadSize(32);
  //radio.setAutoAck(1);                    // Ensure autoACK is enabled
  //radio.enableAckPayload();               // Allow optional ack payloads
  radio.setChannel(0x4c);
  radio.setPALevel(RF24_PA_MAX);


	
	PrepareToRecv();
	sleep(1);
	radio.printDetails();
	
	short radio_id = 0;
	short radio_id_temp = 0;
	short message = 0;
	int state = 0;
	int rad_index = 0;
	signed char Temperature=0;
	unsigned char Humidity=0;
	
	// forever loop
	while (true)
	{
		PrepareToRecv();
		if(radio.available())
		{
			printf("avail.");
			//test
			radio.read(&messagebuf, sizeof(unsigned long));
			memcpy(&radio_id, &messagebuf[0], 2);
			printf("Got message, radio id %d", radio_id);
			Temperature = messagebuf[2];
			Humidity = messagebuf[3];
			rad_index = FindSensorIndex(radio_id);
			if(rad_index>-1)
			{
				printf("Radio identified.");
			}
			Temperatures[rad_index]=Temperature;
			Humidities[rad_index]=Humidity;
			printf("Temperature: %d Humidity: %d", Temperatures[rad_index], Humidities[rad_index]);
			
			//test
			
			/*while(state < 4)
			{
				if(radio.available())
				{		


					radio.read(&messagebuf, sizeof(unsigned long));
										printf("got msg\n");
											printf("message: %d,", messagebuf[0]);
						printf("%d,", messagebuf[1]);
						printf("%d,", messagebuf[2]);
						printf("%d\n", messagebuf[3]);
					memcpy(&message, &messagebuf[2], 2); //copy actual message
					if(radio_id_temp==0){memcpy(&radio_id_temp, &message, 2);};
					
					if(radio_id==0){ 
						memcpy(&radio_id, &message, 2);
					}
					
					if(radio_id_temp==radio_id) 
					{
						
							
					
							
						PrepareToWrite();
						sleep(1);
						
						printf("%d\n", message);
						switch((short)message)
						{
							case SENDING:
								state = 1;
								printf("Receiving. 0\n");
								WriteAck(radio_id);
								printf("Receiving.\n");
								break;
							case TEMPERATURE:
								state = 2;
								printf("temp 0 confirm\n");
								WriteAck(radio_id);
								printf("temp 1 confirm\n");
								break;
							case HUMIDITY:
								state = 3;
								printf("hum 0 confirm\n");
								WriteAck(radio_id);
								printf("hum 1 confirm\n");
								break;
							default:
								switch(state)
								{
									case 2:
										printf("temp arrived\n");
										rad_index = FindSensorIndex(radio_id);
										memcpy(&Temperatures[rad_index], &message+2, sizeof(short));
										WriteAck(radio_id);
										printf("Finished w temp\n");
										break;
									case 3:
										printf("hum arrived\n");
										rad_index = FindSensorIndex(radio_id);
										memcpy(&Humidities[rad_index], &message+2, sizeof(short));
										WriteAck(radio_id);
										printf("Finished w humidity\n");
										state=4; //Finish with this sensor and exit the loop
										break;
								}
								break;
						}
								
						//if(state<4) //carry on listening until all data has been received
						//{
								PrepareToRecv();
						//}
						if(state>=4) { printf("Finished!\n"); radio_id = 0; radio_id_temp = 0; state=0;};
					}
				}
					
			}*/
			state=0;

		}
	}
		
  return 0;
}

int FindSensorIndex(short radio_id)
{
	int i = -1;
	for(int index = 0; index < SENSOR_COUNT; index++)
	{
		if(radio_ids[index]==radio_id)
		{
			i = index;
			break;
		}
	}
	return i;
}

void WriteAck(short radio_id)
{
	//bool sent=false;
	memcpy(&sendbuf[0], &radio_id, 2);
	memcpy(&sendbuf[2], &ACKNOWLEDGE, 2);
	sleep(1);
	bool sent=false;
	while(!sent)
	{
		sent = radio.write(&sendbuf,4);
		if(!sent)
		{
			PrepareToRecv();
			PrepareToWrite();
		}
		printf("radio.write\n");
		sleep(1);
	}
	
	printf("sent: %d,", sendbuf[0]);
	printf("%d,", sendbuf[1]);
	printf("%d,", sendbuf[2]);
	printf("%d\n", sendbuf[3]);
	//return sent;
}

void PrepareToWrite()
{
	radio.stopListening();
	radio.openWritingPipe(SendPipe);
}

void PrepareToRecv()
{
	radio.openReadingPipe(1,RecvPipe);
	radio.startListening();
}

// vim:cin:ai:sts=2 sw=2 ft=cpp
